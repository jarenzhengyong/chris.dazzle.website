

   

   

   
import { PolymerElement, html } from 'https://dashboard.dazzle.website/node_modules/@polymer/polymer/polymer-element.js';
import {Dazzle} from 'https://dashboard.dazzle.website/node_modules/@dazzle/dz-dazzle/dz-library.js';
import './chris-cart-item.js';


class greenPageLoader extends PolymerElement {
    static get is(){
        return 'chris-shopping-cart';
    }
    // static get properties() {
    //       return {

    //       }
    //     }

    constructor(){
        super();
        console.log('Shopping Cart');
        this.productManager = new DataPackage('product');
        this.cart = store.get('cart') || [];

    }
    connectedCallback() {
      super.connectedCallback();

    }
    

    _listener(){
        console.log("user component loaded");
        let buttons = document.querySelectorAll('[dz-func]');
        buttons.forEach(item=>{
            let fc = item.getAttribute('dz-func') || null;
            console.log('Button',item);
            item.addEventListener('click',e=>{
                switch(fc){
                    case '_cartRemove':
                        this._cartRemove(e);
                    break;
                    
                    case '_plusQty':
                        this._plusQty(e);
                        
                    break;

                    case '_minusQty':
                        this._minusQty(e);
                        
                    break;
                    
                    case '_createOrder':
                        console.log('Create Order');

                        this._createOrder();                        
                    break;
                // ....    
                }
  
            });            
        });
        
    }
    
    _createOrder(){
        console.log('Create Order');
        let subUser = store.get('subUser');
        let description = '';
        this.orderManager = new DataPackage('order');
        document.querySelectorAll('chris-cart-item').forEach(item=>{
           description += item.getTitle()+'x' + item.getQty() +'<br/>'; 
        });
        
        let id = 'O-'+ new Date().getTime();
        let json = {
            'id': id,
            'purchaseDate': new Date().getTime(),
            'user': subUser['id'],
            'email': subUser['email'],
            'total': this.amount,
            'desc': description,
            'status':'pending'
        }
        this.orderManager.saveDataWithCache(id,json).then(res=>{
            location.href="/user-profile.html";            
        },err=>{
            alert('Cannot create order. Please contact webmaster');
        });
        // store.set('my-order',json);
        // alert('Your order is created.')
        
    }
    _reCalc(){
        let subtotals = document.querySelectorAll('[dz-subtotal]');
        this.total = 0;
        subtotals.forEach(item=>{
           let amount = parseInt(item.innerHTML);
           this.total += amount;
        });
        this.amount = 15+ this.total;
        document.querySelector('[dz-total]').innerHTML = this.total;
        document.querySelector('[dz-amount]').innerHTML = this.amount;
        
    }
    ready(){
        super.ready();
        let wrapper = document.querySelector('[data-wrapper]');
        this.template = document.querySelector('template#chris-cart-item').innerHTML;
        this.json = {};
        this.cart.forEach(item=>{
            if (!(item in this.json))
                this.json[item] =1;
            else
                this.json[item] ++;
        });
        wrapper.innerHTML = '';
        let allHtml = '';
        for (let k in this.json){
            let qty = this.json[k];
            // allHtml += this.productManager.replaceToken()
            let elm = document.createElement('chris-cart-item');
            elm.setAttribute('item-id',k);
            elm.setAttribute('qty',qty);
            wrapper.appendChild(elm);
        }
        
        document.addEventListener('re-calc',e=>{
            this._reCalc(); 
        });
        
        this._listener();
        

     }
    _select(e) {
        let target = e.currentTarget;
        let id = target.getAttribute('item-id') || null;
        store.set('my-product',id);
        location.href="/productpage.html";
    }

    static get template () {
        return html`
            <slot></slot>
        `;
      }
}
customElements.define(greenPageLoader.is, greenPageLoader);
   