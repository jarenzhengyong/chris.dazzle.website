import { PolymerElement, html } from 'https://dashboard.dazzle.website/node_modules/@polymer/polymer/polymer-element.js';
import {Dazzle} from 'https://dashboard.dazzle.website/node_modules/@dazzle/dz-dazzle/dz-library.js';
import './chris-item.js';
class greenPageLoader extends PolymerElement {
    static get is(){
        return 'chris-list-product';
    }
    // static get properties() {
    //       return {

    //       }
    //     }

    constructor(){
        super();
        console.log('Page Loader');

    }
    connectedCallback() {
      super.connectedCallback();
    }
    
    digestForm(){
        let inputs=document.querySelectorAll('input, select');
        let json = {};
        inputs.forEach(item=>{
           let field = item.getAttribute('name') || null;
           json[field] = item.value;
           console.log('Digest item',item,item.value);

        });
        console.log('Digest',json);
        return json;
    }
    
    ready(){
        super.ready();
      
        console.log("user component loaded");
        let buttons = document.querySelectorAll('[dz-func]');
        buttons.forEach(item=>{
            let fc = item.getAttribute('dz-func') || null;
            item.addEventListener('click',e=>{
                switch(fc){
                    case '_select':
                        this._select(e);
                    break;
                    

                // ....    
                }
  
            });            
        });
        window.fbAsyncInit = function() {
            FB.init({
                appId            : 'your-app-id',
                autoLogAppEvents : true,
                xfbml            : true,
                version          : 'v10.0'
            });
        };
        
     }
    _select(e) {
        let target = e.currentTarget;
        let id = target.getAttribute('item-id') || null;
        store.set('my-product',id);
        location.href="/productpage.html";
    }


    _login() {
        let json = this.digestForm();
        let passwordEntry = json["password"];
        let emailEntry = json["email"];
        console.log('Login',this.userManager,emailEntry,passwordEntry);
        this.userManager.getDataByES(emailEntry).then(res=>{
            if(res['password'] != passwordEntry) {
                alert("Your password is incorrect, please try again.");
            } else {
                // if(res['status'] != 'valid') {
                //     alert("Your account is not active, please active it through your email.");
                // } else {
                    store.set('subUser', res);
                    // store.clearAll();
                    let user = store.get('subUser') || null;
                    if (user) {
                        console.log(user);
                        // location.reload();
                        alert('Login Successful. Please continue shopping');
                        window.location.href = "/index.html";
                    } 
                // }
            }
        }, err=> {
            alert("This account does not exist, please try again.");
        });
    }
    
    _fbLogin() {
        FB.getLoginStatus(function(response) {
            statusChangeCallback(response);
        });
        
        function statusChangeCallback(response) {
            console.log('statusChangeCallback');
            console.log(response);
                    // The response object is returned with a status field that lets the
                    // app know the current login status of the person.
                    // Full docs on the response object can be found in the documentation
                    // for FB.getLoginStatus().
            if (response.status === 'connected') {
                        // Logged into your app and Facebook.
                console.log('Welcome!  Fetching your information.... ');
                FB.api('/me', function (response) {
                console.log('Successful login for: ' + response.name);
                document.getElementById('status').innerHTML =
                    'Thanks for logging in, ' + response.name + '!';
                });
            } else {
                // The person is not logged into your app or we are unable to tell.
                
                document.getElementById('status').innerHTML = 'Please log ' +
                'into this app.';
                FB.login(function(response) {
                  if (response.status === 'connected') {
                    // Logged into your webpage and Facebook.
                  } else {
                    // The person is not logged into your webpage or we are unable to tell. 
                  }
                });
            }
        }
    }
    
    _ggLogin() {
        //.....
    }
    
    _editAccount() {
        let emailEntry = this.digestForm()["email"];
        this.userManager.getDataByES(emailEntry).then(res=>{
            this.userManager.saveDataWithCache(emailEntry,this.digestForm());
        }, err=> {
            console.log(err);
        });
    }
    
    _register() {

        let emailEntry = this.digestForm()["email"];
        console.log(this.userManager.getDataByCache(emailEntry)["id"]);
        
        this.userManager.getDataByES(emailEntry).then(res=>{
            alert("This email has already been registered, please try another one.");
        }, err=> {
            this.userManager.saveDataWithCache(emailEntry,this.digestForm());
            // var newToken = this._generateUserToken(emailEntry)["tokenID"];
            // let activationLink = "<img src='https://kctea.dazzle.website/wp-content/uploads/2021/03/taetea-01-1536x1536.png' style='display: block; text-align: center; width: 200px; object-fit: contain;'><h2 style='text-align: left;'>Activate Your Account</h2> <a herf='link' style='text-align: center;'> https://kctea.dazzle.website/activate_account.html?tokenID=" + newToken + " </a>";
            Dazzle.sendEmail(emailEntry, "Your Account is activated", "Login: [This email address] <br/>Password: "+this.digestForm()['password']);
            alert('Your account is created. Please login for shopping');
            location.href="/index.html";
            // if (window.confirm('An verification email has been sent to your inbox, please click the link to activate your account.')) {
            //     window.location.href = "https://kctea.dazzle.website/login";
            // } else {
            //     window.location.href = "https://kctea.dazzle.website/login";
            // }
            // setTimeout(function(){  }, 3000);
            console.log(err);
        });
        // location.reload();
    }
    
    _fbRegister() {
        //.....
    }
    
    _ggRegister() {
        //.....
    }
    
    _logout() {
        if (confirm('您要登出嗎？')) {
            store.set('subUser',null);
            window.location.href = "https://kctea.dazzle.website";
        }
    }
    
    _resetPassword() {
        console.log(this.digestForm());
        let emailEntry = this.digestForm()["email"];
        this.userManager.getDataByCache(emailEntry).then(res=>{
            if(res['email'] != emailEntry) {
                alert("Your email doesn't exist, please check for typoes.");
            } else {
                alert("An email has been sent to your inbox.");
                Dazzle.sendEmail(emailEntry, "Reset Password", "Test Message");
            }
        });
    }
    
    _generateUserToken(email) {
        // let todayDate = new Date().toISOString().slice(0, 10);
        var encrypted = String(CryptoJS.AES.encrypt(String(Math.round(+new Date()/10)), "kctea"));
        // var decrypted = CryptoJS.AES.decrypt(encrypted, "kctea");
        let tokenData = '{ "tokenID":"' + encrypted + '", "createdAt": ' + Math.round(+new Date()/1000) + ', "email":"' + email + '", "action": "register"}'
        // alert(String(Math.round(+new Date()/1000)));
        // alert(encrypted);
        // alert(decrypted.toString(CryptoJS.enc.Utf8));
        var tokenJson = JSON.parse(tokenData);
        console.log(tokenJson);
        this.tokenManager.saveDataWithCache(encrypted,tokenJson);
        return tokenJson;
    }
    
    prepareRepeatItem(elm){
        let templateId = elm.getAttribute('template-id');

        let template = document.querySelector('template#'+templateId).innerHTML;
        console.log('Template',template);
        let field = elm.getAttribute('items');
        let data = this.data[field] || null;
        let html ='';
        if (Array.isArray(data)){
            for(let i=0;i<data.length;i++){
                let draft = template;
                draft = draft.replaceAll("[[item]]","[["+field+i.toString()+"]]");
                html = html+draft;
            }
        }
        elm.outerHTML = html;
    }
    preprocess(token,action){
        if (!action)
            return token;
            
        switch(action) {
            case 'date':
                let date = new Date(token);
                let str = date.getDate()+"/"+(date.getMonth()+1)+"/"+date.getFullYear();
                return str;                        
            break;
            
            default:
                return token;
            break;
            
        }
        
        
    }
    
    getToken(html){
        var re = new RegExp('(\[\[([0-9a-zA-Z_| ]*)\]\])');
        const regexp = /(\[\[([0-9a-zA-Z_| ]*)\]\])/g;
        const array = [...html.matchAll(regexp)];
        array.forEach(item=>{
            let orgItem,token,action,result;
            orgItem = item;
            item = item.replace("[[","");
            item = item.replace("]]","");
            [token,action] = item.split("|");
            token = trim(token);
            action = trim(action);
            result = this.preprocess(token,action);
            html = html.replace(orgItem,result);
        });
        return html;
    }
    

    replaceToken(data,html){
        let index = this.index;
        data = reformData(data);
        // var re = new RegExp('(\[\[([0-9a-zA-Z_| ]*)\]\])');
        const regexp = /(\[\[([0-9a-zA-Z_| ]*)\]\])/g;
        const array = [...html.matchAll(regexp)];
        let arr = [];
        array.forEach(item=>{
            arr.push(item[0]); 
        });
        
        console.log('Array',array);
        arr.forEach(item=>{
            
            let orgItem,token,action,result;
            if (item){
                console.log('Item',item);
                orgItem = item;
                item = item.replace("[[","");
                item = item.replace("]]","");
                [token,action] = item.split("|");
                if (typeof action === "undefined")
                    action = null;
                console.log('Token',token,action);
                token = token.trim();
                token = data[token];

                if (action)
                    action = action.trim();
                    
                else
                    action = null;

                if (action)
                    result = this.preprocess(token,action);
                else
                    result = token;
                
                
                html = html.replace(orgItem,result);                
                
            }

        });

        return html;



        // for(let k in data){
        //     let token = "[["+k+"]]";
        //     html = html.replaceAll(token,data[k]);
            
        //     console.log('Token',token,data[k]);
        // }
        // return html;
    
        
        function reformData(data){
            data['_index'] = index;
            for (let k in data){
                if (Array.isArray(data[k])) {
                    let item = data[k];
                    for (let i=0;i<item.length;i++)
                        data[k+i.toString()] = item[i];
                }            
            }
            return data;
        }
    
    }

    static get template () {
        return html`
        <div id="fb-root" dzid="9404"></div>
        <div class="fb-login-button" data-width="" data-size="large" data-button-type="login_with" data-layout="rounded" data-auto-logout-link="false" data-use-continue-as="false" dzid="9406"></div>
        
            <slot></slot>
        `;
      }
}
customElements.define(greenPageLoader.is, greenPageLoader);
   